from telethon.tl.custom import Button
from n3rz4.base import User, session
from n3rz4.subscription import check_subscription
from n3rz4.reports import count_session, report_message
from datetime import datetime, timedelta


class TelegramBot:
    def __init__(self, client, api_id, api_hash) -> None:
        self.client = client
        self.api_id = api_id
        self.api_hash = api_hash
        self.owners = [7497310837, 1781280002]
        self.admins = set(self.owners)
        self.users = {}
        self.subscription_text = (
            "üí∏ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>\n"
            "CryptoBot: <a href='http://t.me/send?start=IVffHIf23nSn'>—Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É</a>\n\n"
        )

    async def start_handler(self, msg) -> None:
        user_id = msg.sender_id
        if msg.chat_id != user_id:
            return

        user_entity = await self.client.get_entity(user_id)
        user = session.query(User).filter_by(id=user_id).first()

        if user is None:
            new_user = User(id=user_id, username=user_entity.username, status="")
            session.add(new_user)
            session.commit()
            user = new_user

        user = await check_subscription(user_id)
        subscription_status = (
            "‚õîÔ∏è <b>–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</b>"
            if user.subscribe is None
            else f"‚úÖ <b>–ê–∫—Ç–∏–≤–Ω–∞ –¥–æ</b> <code>{user.subscribe}</code>."
        )

        text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, @{user_entity.username}!\n\n"
            f"üíº <b>–í–∞—à —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:</b> {subscription_status}\n\n"
            f"üí° <i>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏–∂–µ:</i>\n\n"
            f"üì® –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: <b>@fenomenSS</b>"
        )
        image = "https://media1.tenor.com/m/e_MHf5Uye-oAAAAC/%D0%BA%D0%BE%D1%82-%D0%BC%D0%B5%D0%BC.gif"
        buttons = None
        if not user.subscribe:
            buttons = [[Button.inline("üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", b"buy_subscription")]]
        await msg.reply(text, file=image, buttons=buttons, parse_mode="html")

    async def help_handler(self, msg) -> None:
        user_id = msg.sender_id
        user = await check_subscription(user_id)

        help_text = (
            "üìÑ <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>\n\n"
            "<b>/start</b> ‚Äî –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "<b>/help</b> ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "<b>/ss</b> <i>{—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ}</i> ‚Äî –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–Ω–æ—Å –∞–∫–∫–∞—É–Ω—Ç–∞\n"
            "\n"
        )

        if user_id in self.admins or user.status == "admin":
            help_text += (
                "üëë <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
                "<b>/subscribe</b> <i>{id} {–¥–Ω–µ–π}</i> ‚Äî –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π\n"
                "<b>/add_admin</b> <i>{id}</i> ‚Äî –ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
                "<b>/remove_admin</b> <i>{id}</i> ‚Äî –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n"
                "\n"
            )

        help_text += "üí¨ –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–∏—à–∏—Ç–µ <b>@fenomenSS</b>."
        await msg.reply(help_text, parse_mode="html")

    async def subscribe_handler(self, msg) -> None:
        user_id = msg.sender_id
        admin_user = session.query(User).filter_by(id=user_id).first()

        try:
            target_user_id, days = map(int, msg.message.message.split()[1:])
        except (ValueError, IndexError):
            await msg.reply(
                "‚ö†Ô∏è <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:</b> /subscribe <i>{id} {–¥–Ω–µ–π}</i>",
                parse_mode="html",
            )
            return

        if user_id in self.admins or admin_user.status == "admin":
            await self._add_subscription(msg, target_user_id, days)
        else:
            await msg.reply(
                "‚ùå <b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.</b>",
                parse_mode="html",
            )

    async def _add_subscription(self, msg, user_id, days) -> None:
        end_subscription = datetime.now() + timedelta(days=days)
        user = session.query(User).filter_by(id=user_id).first()

        if user:
            user.subscribe = end_subscription
            session.commit()
            user = await check_subscription(user_id)
            user_entity = await self.client.get_entity(user_id)

            await msg.reply(
                f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={user_id}'>{user_entity.first_name}</a> "
                f"–ø–æ–ª—É—á–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –¥–æ <code>{user.subscribe}</code>.</b>",
                parse_mode="html",
            )
        else:
            await msg.reply(
                "‚ö†Ô∏è <b>–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –Ω–∞–ø–∏—Å–∞—Ç—å /start –≤ –±–æ—Ç–µ.</b>",
                parse_mode="html",
            )

    async def status_handler(self, msg) -> None:
        user_id = msg.sender_id
        user = await check_subscription(user_id)

        subscription_status = (
            "‚õîÔ∏è <b>–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</b>"
            if user.subscribe is None
            else f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ:</b> <code>{user.subscribe}</code>."
        )

        buttons = None
        if user.subscribe is None:
            buttons = [[Button.inline("üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", b"buy_subscription")]]

        await msg.reply(
            f"üíº <b>–í–∞—à —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:</b> {subscription_status}",
            buttons=buttons,
            parse_mode="html"
        )

    async def count_handler(self, msg) -> None:
        user_id = msg.sender_id
        # user = await check_subscription(user_id)

        if user_id in self.admins:
            bot_message = await msg.reply(
                "üîÑ<b>–ü–æ–¥—Å—á—ë—Ç —Å–µ—Å—Å–∏–π –∑–∞–ø—É—â–µ–Ω</b>",
                parse_mode="html",
            )
            count = await count_session(self.api_id, self.api_hash, bot_message)
            
            await bot_message.edit(
                f"‚úÖ <b>–û–±—â–µ–µ –∫–æ–ª-–≤–æ —Å–µ—Å—Å–∏–π:</b> {count}",
                parse_mode="html",
            )
        else:
            await msg.reply(
                "‚ùå <b>–ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.</b>",
                parse_mode="html",
            )

    async def snos_handler(self, msg) -> None:
        try:
            link = msg.message.message.split(maxsplit=1)[1]
        except IndexError:
            await msg.reply(
                "‚ö†Ô∏è <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:</b> /ss <i>{—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ}</i>",
                parse_mode="html",
            )
            return

        user_id = msg.sender_id
        user = await check_subscription(user_id)

        if user_id in self.admins or user.status == "admin" or user.subscribe:
            await msg.reply(
                "üîÑ <b>–ü—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–∞–ø—É—â–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.</b>",
                parse_mode="html",
            )
            await report_message(link, self.api_id, self.api_hash)
            await msg.reply(
                "‚úÖ <b>–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ê–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.</b>",
                parse_mode="html",
            )
        else:
            await msg.reply(
                "‚ùå <b>–ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.</b>",
                parse_mode="html",
            )

    async def callback_handler(self, query) -> None:
        callbacks = {
            b"buy_subscription": self._show_subscription_options,
            b"week": self._show_subscription_confirmation,
            b"month": self._show_subscription_confirmation,
            b"year": self._show_subscription_confirmation,
            b"forever": self._show_subscription_confirmation,
            b"buy_admin": self._show_subscription_confirmation,
            b"back_to_buy_menu": self._show_subscription_options,
            b"back_to_menu": self._show_main_menu,
            b"confirm_the_purchase": self._confirm_purchase,
        }
        handler = callbacks.get(query.data)
        if handler:
            await handler(query)

    async def _show_subscription_options(self, query) -> None:
        buttons = [
            [Button.inline("üóì –ù–µ–¥–µ–ª—è", b"week"), Button.inline("üìÖ –ú–µ—Å—è—Ü", b"month")],
            [Button.inline("üìÜ –ì–æ–¥", b"year"), Button.inline("‚ôæ –ù–∞–≤—Å–µ–≥–¥–∞", b"forever")],
            [Button.inline("üëë –ê–¥–º–∏–Ω–∫–∞", b"buy_admin")],
            [Button.inline("¬´ –ù–∞–∑–∞–¥", b"back_to_menu")],
        ]
        await query.edit(
            "üí≥ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:</b>",
            buttons=buttons,
            parse_mode="html",
        )

    async def _show_subscription_confirmation(self, query) -> None:
        period = {
            b"week": ("–ù–µ–¥–µ–ª—è", "300—Ä / 3.5$ / 125‚Ç¥"),
            b"month": ("–ú–µ—Å—è—Ü", "900—Ä / 10$ / 375‚Ç¥"),
            b"year": ("–ì–æ–¥", "2500—Ä / 27.5$ / 1125‚Ç¥"),
            b"forever": ("–ù–∞–≤—Å–µ–≥–¥–∞", "3500—Ä / 38$ / 1575‚Ç¥"),
            b"buy_admin": ("–ê–¥–º–∏–Ω–∫–∞", "8000—Ä / 85$ / 3400‚Ç¥"),
        }

        period_name, price = period[query.data]
        user_id = query.sender_id
        self.users[user_id] = {query.data.decode(): period_name}

        buttons = [
            [Button.inline("‚òëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É", b"confirm_the_purchase")],
            [Button.inline("¬´ –ù–∞–∑–∞–¥", b"back_to_buy_menu")],
        ]
        await query.edit(
            self.subscription_text
            + f"<b>–í—ã –≤—ã–±—Ä–∞–ª–∏:</b> {period_name}\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {price}",
            buttons=buttons,
            parse_mode="html",
        )

    async def _confirm_purchase(self, query) -> None:
        user_id = query.sender_id
        user_entity = await self.client.get_entity(user_id)
        username = user_entity.username or "NoUsername"

        package_info = self.users.get(user_id)

        if package_info:
            package_type = list(package_info.values())[0]
            confirmation_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            for owner_id in self.owners:
                await self.client.send_message(
                    owner_id,
                    (
                        f"üì¨ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã</b>\n\n"
                        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <a href='tg://user?id={user_id}'>{username}</a>\n"
                        f"üÜî <b>ID:</b> <code>{user_id}</code>\n"
                        f"üìÖ <b>–í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</b> <code>{confirmation_time}</code>\n"
                        f"üí≥ <b>–¢–∞—Ä–∏—Ñ:</b> {package_type}\n\n"
                        "üö® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É."
                    ),
                    parse_mode="html",
                )

        await query.edit(
            "‚úÖ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\nüí¨ <i>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–∫–æ—Ä–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å.</i>",
            parse_mode="html",
        )

    async def _show_main_menu(self, query) -> None:
        user_id = query.sender_id
        user = await check_subscription(user_id)
        subscription_status = (
            "‚õîÔ∏è <b>–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</b>"
            if user.subscribe is None
            else f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ:</b> <code>{user.subscribe}</code>."
        )

        buttons = [[Button.inline("üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", b"buy_subscription")]]
        await query.edit(
            f"üíº <b>–í–∞—à —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:</b> {subscription_status}\n\n"
            f"üìù –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ.",
            buttons=buttons,
            parse_mode="html",
        )

    async def add_admin_handler(self, msg) -> None:
        user_id = msg.sender_id
        admin_user = session.query(User).filter_by(id=user_id).first()

        try:
            new_admin_id = int(msg.message.message.split()[1])
        except (ValueError, IndexError):
            await msg.reply(
                "‚ö†Ô∏è <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:</b> /add_admin {id}", parse_mode="html"
            )
            return

        if user_id in self.admins or admin_user.status == "admin":
            if new_admin_id not in self.admins:
                self.admins.add(new_admin_id)
                await msg.reply(
                    f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={new_admin_id}'>{new_admin_id}</a> –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.</b>",
                    parse_mode="html",
                )
            else:
                await msg.reply(
                    "‚ö†Ô∏è <b>–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.</b>",
                    parse_mode="html",
                )
        else:
            await msg.reply(
                "‚ùå <b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.</b>",
                parse_mode="html",
            )

    async def remove_admin_handler(self, msg) -> None:
        user_id = msg.sender_id
        admin_user = session.query(User).filter_by(id=user_id).first()

        try:
            admin_id = int(msg.message.message.split()[1])
        except (ValueError, IndexError):
            await msg.reply(
                "‚ö†Ô∏è <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:</b> /remove_admin {id}", parse_mode="html"
            )
            return

        if user_id in self.admins or admin_user.status == "admin":
            if admin_id in self.admins:
                self.admins.remove(admin_id)
                await msg.reply(
                    f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={admin_id}'>{admin_id}</a> —É–¥–∞–ª—ë–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.</b>",
                    parse_mode="html",
                )
            else:
                await msg.reply(
                    "‚ö†Ô∏è <b>–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.</b>",
                    parse_mode="html",
                )
        else:
            await msg.reply(
                "‚ùå <b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.</b>",
                parse_mode="html",
            )
